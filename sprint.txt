// This is a SprintDLL script. To run it, execute: sprintdll.exe run sdb.sprint

let pdb = SdbCreateDatabase("YourDatabase.sdb", 0);
let tDatabase = SdbBeginWriteListTag(pdb, 0x7001);
    SdbWriteStringTag(pdb, TAG_NAME, pw!("Test Database"));
    SdbWriteBinaryTag(pdb, TAG_DATABASE_ID, lpstr "TestTestTestTest", 0x10);
    SdbWriteQWORDTag(pdb, TAG_TIME, long 0);
    SdbWriteStringTag(pdb, TAG_COMPILER_VERSION, pw!("3.0.0.9"));
    SdbWriteDWORDTag(pdb, TAG_RUNTIME_PLATFORM, 39);
    SdbWriteDWORDTag(pdb, 0x4055, 0);
    let tLibrary = SdbBeginWriteListTag(pdb, 0x7002);
        let tShim1 = SdbBeginWriteListTag(pdb, 0x7004);
            SdbWriteStringTag(pdb, TAG_NAME, pw!("AcceptEula"));
            SdbWriteStringTag(pdb, 0x600A, pw!("AcRes.dll"));
            SdbWriteBinaryTag(pdb, 0x9010, lpstr "AcceptEulaShimSh", 0x10);
            SdbWriteDWORDTag(pdb, TAG_RUNTIME_PLATFORM, 39);
            SdbWriteNULLTag(pdb, 0x1002);
        SdbEndWriteListTag(pdb, slotdata tShim1);
        let tShim2 = SdbBeginWriteListTag(pdb, 0x7004);
            SdbWriteStringTag(pdb, TAG_NAME, pw!("FakeSchTask"));
            SdbWriteStringTag(pdb, 0x600A, pw!("AcRes.dll"));
            SdbWriteBinaryTag(pdb, 0x9010, lpstr "FakeSchTaskShimS", 0x10);
            SdbWriteDWORDTag(pdb, TAG_RUNTIME_PLATFORM, 39);
            SdbWriteNULLTag(pdb, 0x1002);
        SdbEndWriteListTag(pdb, slotdata tShim2);
    SdbEndWriteListTag(pdb, slotdata tLibrary);
    let tExe1 = SdbBeginWriteListTag(pdb, 0x7007);
        SdbWriteStringTag(pdb, TAG_NAME, pw!("Winobj.exe"));
        SdbWriteStringTag(pdb, 0x6006, pw!("Winobj"));
        SdbWriteStringTag(pdb, 0x6005, pw!("Sysinternals"));
        SdbWriteBinaryTag(pdb, 0x9004, lpstr "Winobj EXE Winob", 0x10);
        SdbWriteBinaryTag(pdb, 0x9011, lpstr "Winobj app Winob", 0x10);
        SdbWriteDWORDTag(pdb, TAG_RUNTIME_PLATFORM, 37);
        let tMatching1 = SdbBeginWriteListTag(pdb, 0x7008);
            SdbWriteStringTag(pdb, TAG_NAME, pw!("*"));
            SdbWriteStringTag(pdb, 0x6010, pw!("Sysinternals Winobj"));
        SdbEndWriteListTag(pdb, slotdata tMatching1);
        let tShimref1 = SdbBeginWriteListTag(pdb, 0x7009);
            SdbWriteStringTag(pdb, TAG_NAME, pw!("AcceptEula"));
        SdbEndWriteListTag(pdb, slotdata tShimref1);
    SdbEndWriteListTag(pdb, slotdata tExe1);
    let tExe2 = SdbBeginWriteListTag(pdb, 0x7007);
        SdbWriteStringTag(pdb, TAG_NAME, pw!("accesschk.exe"));
        SdbWriteStringTag(pdb, 0x6006, pw!("AccessChk"));
        SdbWriteStringTag(pdb, 0x6005, pw!("Sysinternals"));
        SdbWriteBinaryTag(pdb, 0x9004, lpstr "AccessChk EXE Ac", 0x10);
        SdbWriteBinaryTag(pdb, 0x9011, lpstr "AccessChk app Ac", 0x10);
        SdbWriteDWORDTag(pdb, TAG_RUNTIME_PLATFORM, 37);
        let tMatching2 = SdbBeginWriteListTag(pdb, 0x7008);
            SdbWriteStringTag(pdb, TAG_NAME, pw!("*"));
            SdbWriteStringTag(pdb, 0x6010, pw!("Sysinternals AccessChk"));
        SdbEndWriteListTag(pdb, slotdata tMatching2);
        let tShimref2 = SdbBeginWriteListTag(pdb, 0x7009);
            SdbWriteStringTag(pdb, TAG_NAME, pw!("AcceptEula"));
        SdbEndWriteListTag(pdb, slotdata tShimref2);
    SdbEndWriteListTag(pdb, slotdata tExe2);
SdbEndWriteListTag(pdb, slotdata tDatabase);
SdbCloseDatabaseWrite(pdb);